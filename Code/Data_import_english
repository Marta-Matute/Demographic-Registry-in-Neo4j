// DELETE ALL EXISTING NODES
match (n) detach delete n;

// LOAD PEOPLE DATA
LOAD CSV WITH HEADERS FROM 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTfU6oJBZhmhzzkV_0-avABPzHTdXy8851ySDbn2gq32WwaNmYxfiBtCGJGOZsMgCWjzlEGX4Zh1wqe/pub?output=csv' AS row 
CREATE (p:PERSON {Id: toInteger(row.Id), Year: toInteger(row.Year), Name: row.name, Last_Name: row.surname, Second_Last_Name: row.second_surname});

// LOAD HOUSE DATA
LOAD CSV WITH HEADERS FROM 'https://docs.google.com/spreadsheets/d/e/2PACX-1vT0ZhR6BSO_M72JEmxXKs6GLuOwxm_Oy-0UruLJeX8_R04KAcICuvrwn2OENQhtuvddU5RSJSclHRJf/pub?output=csv' AS row
CREATE (:HOUSE {Municipality: row.Municipi, Home_Id: toInteger(row.Id_Llar), Registry_Year: toInteger(row.Any_Padro), Street: row.Carrer, Number: toInteger(row.Numero)});

// DELTE ANY EXISTING INDEXES
CALL apoc.schema.assert({},{},true) YIELD label, key
RETURN *; 

// CREATE INDEXES (FOR FASTER DATA CREATION)
create index for (p:PERSON) on (p.Id);
create index for (p:PERSON) on (p.Year);
create index for (h:HOUSE) on (h.Home_Id);
create index for (h:HOUSE) on (h.Municipality);
create index for (h:HOUSE) on (h.Registry_Year);

// CREATION OF "LIVES" RELATIONSHIP BETWEEN A PERSON AND A HOUSE
LOAD CSV WITH HEADERS FROM 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRM4DPeqFmv7w6kLH5msNk6_Hdh1wuExRirgysZKO_Q70L21MKBkDISIyjvdm8shVixl5Tcw_5zCfdg/pub?output=csv' AS row
MATCH (p:PERSON {Id: toInteger(row.IND), Year: toInteger(row.Year)})
MATCH (h:HOUSE {Municipality: row.Location, Home_Id: toInteger(row.HOUSE_ID), Registry_Year: toInteger(row.Year)})
MERGE (p)-[:LIVES {Year: toInteger(row.Year)}]->(h);

// CREATION OF "SAME_AS" BETWEEN TWO PEOPLE
LOAD CSV WITH HEADERS FROM 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTgC8TBmdXhjUOPKJxyiZSpetPYjaRC34gmxHj6H2AWvXTGbg7MLKVdJnwuh5bIeer7WLUi0OigI6wc/pub?output=csv' AS row
MATCH (p:PERSON {Id: toInteger(row.Id_A)})
MATCH (q:PERSON {Id: toInteger(row.Id_B)})
MERGE (p)-[:SAME_AS]->(q);

// CREATION OF "FAMILY" RELATIONSHIP BETWEEN TWO PEOPLE
LOAD CSV WITH HEADERS FROM 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRVOoMAMoxHiGboTjCIHo2yT30CCWgVHgocGnVJxiCTgyurtmqCfAFahHajobVzwXFLwhqajz1fqA8d/pub?output=csv' AS row 
MATCH (p:PERSON {Id: toInteger(row.ID_1)})
MATCH (q:PERSON {Id: toInteger(row.ID_2)})
MERGE (p)-[rel:FAMILY {Relation: row.Relacio, Harmonized_Relation: row.Relacio_Harmonitzada}]->(q);
